"""
Export test cases as Python (.py) files
"""
from pathlib import Path
from datetime import datetime
from typing import Dict


class PythonExporter:
    """
    Exports test cases as pytest-compatible Python files
    """

    def __init__(self):
        """Initialize the Python exporter"""
        pass

    def export(
        self,
        tests: str,
        output_path: str,
        metadata: Dict = None
    ) -> str:
        """
        Export tests to a Python file

        Args:
            tests: Test code string
            output_path: Path to save the .py file
            metadata: Additional metadata to include as comments

        Returns:
            Path to the exported file
        """
        # Ensure .py extension
        output_path = Path(output_path)
        if output_path.suffix != '.py':
            output_path = output_path.with_suffix('.py')

        # Build file header
        header = self._generate_header(metadata)

        # Combine header and tests
        full_content = header + '\n\n' + tests

        # Write to file
        output_path.parent.mkdir(parents=True, exist_ok=True)
        output_path.write_text(full_content, encoding='utf-8')

        return str(output_path)

    def _generate_header(self, metadata: Dict = None) -> str:
        """
        Generate file header with metadata

        Args:
            metadata: Metadata dict

        Returns:
            Header string
        """
        header_lines = [
            '"""',
            'Generated Test Suite',
            '=' * 50,
        ]

        if metadata:
            header_lines.append('')
            header_lines.append('Generation Metadata:')

            if 'user_story' in metadata:
                header_lines.append(f"User Story: {metadata['user_story']}")

            if 'timestamp' in metadata:
                header_lines.append(f"Generated: {metadata['timestamp']}")

            if 'coverage' in metadata:
                header_lines.append(f"Coverage: {metadata['coverage']:.1%}")

            if 'iterations' in metadata:
                header_lines.append(f"Iterations: {metadata['iterations']}")

            if 'test_count' in metadata:
                header_lines.append(f"Test Count: {metadata['test_count']}")

        header_lines.extend([
            '',
            'Generated by AI-Powered Test Case Generator',
            '"""',
            ''
        ])

        return '\n'.join(header_lines)

    def add_test_markers(self, tests: str, markers: list = None) -> str:
        """
        Add pytest markers to test functions

        Args:
            tests: Test code
            markers: List of markers to add (e.g., ['slow', 'integration'])

        Returns:
            Test code with markers
        """
        if not markers:
            return tests

        # This is a simplified implementation
        # In production, you'd want to parse the AST and add markers properly
        lines = tests.split('\n')
        modified_lines = []

        for line in lines:
            if line.strip().startswith('def test_'):
                # Add markers before the test function
                for marker in markers:
                    modified_lines.append(f'@pytest.mark.{marker}')
            modified_lines.append(line)

        return '\n'.join(modified_lines)
